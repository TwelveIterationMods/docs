---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon';
import curseForgeLogo from '../../../../_curseforge.svg';
import modrinthLogo from '../../../../_modrinth.svg';
import Layout from '../../../../../../../layouts/Layout.astro';
import listModFiles from '../../../../../../../utils/list-mod-files';

export async function getStaticPaths() {
    const branches = ['release', 'snapshot'];
    const modEntries = await getCollection('mods');
    return modEntries.flatMap((entry) =>
        entry.data.gameVersions.flatMap((gameVersion: string) =>
            entry.data.loaders.flatMap((loader: string) =>
                branches.flatMap((branch) => {
                    const parts = entry.slug.split('/');
                    return {
                        params: { game: parts[0], mod: parts[1], gameVersion, branch, loader: loader.toLowerCase() },
                        props: { entry, gameVersion, loader, branch },
                    };
                })
            )
        )
    );
}

const { entry, gameVersion, loader, branch } = Astro.props;

const title = 'Download ' + entry.data.title + ' for Minecraft ' + gameVersion + ' (' + loader + ')';
const curseForgeUrl = entry.data.curseForgeSlug ? `https://www.curseforge.com/minecraft/mc-mods/${entry.data.curseForgeSlug}` : null;
const modrinthUrl = entry.data.modrinthSlug ? `https://modrinth.com/mod/${entry.data.modrinthSlug}` : null;

const humanizeFileSize = (bytes: number) => {
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) return '0 Byte';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return parseFloat((bytes / Math.pow(1024, i)).toFixed(2)) + ' ' + sizes[i];
};

const humanizeTimestamp = (timestamp?: string) => {
    if (!timestamp) {
        return 'Unknown';
    }

    const date = new Date(timestamp);
    return date.toLocaleString();
};

const humanizeVersion = (version?: string) => {
    return version?.split('+')[0];
};

const jars = await listModFiles(entry.data.modId, gameVersion, loader.toLowerCase(), branch);
const latestJar = jars[0];
---

<Layout title={title}>
    <h1 class="text-4xl text-center mb-4">{title}</h1>

    <div class="text-center"></div>

    <div class="flex items-end justify-center gap-4">
        <label class="form-control w-full max-w-xs">
            <div class="label">
                <span class="label-text">Game Version</span>
            </div>
            <select class="select select-bordered">
                {entry.data.gameVersions.map((gameVersion) => <option>{gameVersion}</option>)}
            </select>
        </label>
        <label class="form-control w-full max-w-xs">
            <div class="label">
                <span class="label-text">Mod Loader</span>
            </div>
            <select class="select select-bordered">
                {entry.data.loaders.map((loader) => <option>{loader}</option>)}
            </select>
        </label>

        {
            latestJar && (
                <a href={'/download?v=' + encodeURIComponent(latestJar.downloadUrl)} class="btn btn-success">
                    <Icon name="mdi:download" class="w-6" />
                    <span>
                        <strong>Download</strong>
                        {humanizeVersion(latestJar.version)} for <strong>Minecraft {gameVersion}</strong>
                        <span>
                            (<strong>{loader}</strong>)
                        </span>
                        <span>({humanizeFileSize(latestJar.fileSize)})</span>
                    </span>
                </a>
            )
        }
    </div>

    <div class="divider"></div>

    <table class="table mb-4">
        <thead>
            <tr>
                <th>Version</th>
                <th>Loader</th>
                <th>Game Version</th>
                <th>Released at</th>
                <th>File Size</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            {
                jars.map((jar, i) => (
                    <tr>
                        <td>
                            <div class="flex items-center gap-2">
                                {humanizeVersion(jar.version)}
                                {i === 0 && <span class="badge badge-success badge-sm">latest</span>}
                            </div>
                        </td>
                        <td>{loader}</td>
                        <td>{gameVersion}</td>
                        <td>{humanizeTimestamp(jar.lastModified)}</td>
                        <td>{humanizeFileSize(jar.fileSize)}</td>
                        <td>
                            <a href={'/download?v=' + encodeURIComponent(jar.downloadUrl)} class="btn btn-square btn-sm btn-success">
                                <Icon name="mdi:download" className="w-6" />
                            </a>
                        </td>
                    </tr>
                ))
            }
        </tbody>
    </table>
</Layout>

<div class="divider"></div>

<p class="text-center text-lg opacity-80 mb-4">Looking for older versions?</p>

<div class="flex justify-center items-center gap-4">
    {
        curseForgeUrl && (
            <a href={curseForgeUrl} class="btn btn-curseforge">
                <Image src={curseForgeLogo} alt="" class="w-6" />
                Downloads on CurseForge
            </a>
        )
    }
    {
        modrinthUrl && (
            <a href={modrinthUrl} class="btn btn-modrinth">
                <Image src={modrinthLogo} alt="" class="w-6" />
                Downloads on Modrinth
            </a>
        )
    }
</div>

<div class="divider"></div>

<!--<div class="mb-4 flex justify-center">
        <a href="/sponsor"><img src="https://mods.twelveiterations.com/img/sponsor.png" alt="Support the Development for only $2 a month." /></a>
    </div>-->
