---
import { getCollection } from 'astro:content';
import { Icon } from 'astro-icon';
import Layout from '../../../../../../../layouts/Layout.astro';

export async function getStaticPaths() {
    const gameVersions = ['1.20.1', '1.20.4', '1.20.6'];
    const loaders = ['fabric', 'forge', 'neoforge'];
    const branches = ['release', 'snapshot'];
    const modEntries = await getCollection('mods');
    return gameVersions.flatMap((gameVersion) =>
        loaders.flatMap((loader) =>
            branches.flatMap((branch) =>
                modEntries.map((entry) => {
                    const parts = entry.slug.split('/');
                    return {
                        params: { game: parts[0], mod: parts[1], gameVersion, branch, loader },
                        props: { entry, gameVersion, loader, branch },
                    };
                })
            )
        )
    );
}

async function searchMaven(
    repository: string,
    groupId: string,
    artifactId: string
): Promise<
    {
        version: string;
        assets: {
            downloadUrl: string;
            fileSize: number;
            lastModified: string;
            maven2: {
                extension: string;
                classifier?: string;
            };
            contentType: string;
        }[];
    }[]
> {
    const nexusUrl = 'https://maven.twelveiterations.com/service/rest/v1/search';
    const queryParams = new URLSearchParams({
        repository: repository,
        group: groupId,
        name: artifactId,
        sort: 'version',
    });

    try {
        const response = await fetch(`${nexusUrl}?${queryParams.toString()}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        return data.items;
    } catch (error) {
        console.error('Error fetching artifact:', error);
        return [];
    }
}

const { entry, gameVersion, loader, branch } = Astro.props;
const repository = branch === 'snapshot' ? 'maven-snapshots' : 'maven-releases';
const modId = entry.data.modId;
const versions = await searchMaven(repository, 'net.blay09.mods', modId + '-' + loader);
const jars = versions.map((version) => {
    const jarAsset = version.assets.find(
        (asset) => asset.contentType == 'application/java-archive' && asset.maven2.extension === 'jar' && !asset.maven2.classifier
    );
    return {
        version: version.version,
        downloadUrl: jarAsset?.downloadUrl.replace('maven-snapshots', 'maven-public').replace('maven-releases', 'maven-public') ?? '',
        fileSize: jarAsset?.fileSize ?? 0,
        lastModified: jarAsset?.lastModified,
    };
});
const filteredJars = jars.filter((jar) => jar?.version.endsWith('+' + gameVersion));
const friendlyLoader = loader === 'neoforge' ? 'NeoForge' : loader.charAt(0).toUpperCase() + loader.slice(1);
const title = 'Download ' + entry.data.title + ' for Minecraft ' + gameVersion + ' (' + friendlyLoader + ')';

const humanizeFileSize = (bytes: number) => {
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) return '0 Byte';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return parseFloat((bytes / Math.pow(1024, i)).toFixed(2)) + ' ' + sizes[i];
};

const humanizeTimestamp = (timestamp?: string) => {
    if (!timestamp) {
        return 'Unknown';
    }

    const date = new Date(timestamp);
    return date.toLocaleString();
};

const humanizeVersion = (version?: string) => {
    return version?.split('+')[0];
};
---

<Layout title={title}>
    <h1 class="text-4xl text-center mb-4">{title}</h1>

    <table class="table mb-4">
        <thead>
            <tr>
                <th>Version</th>
                <th>Loader</th>
                <th>Game Version</th>
                <th>Released at</th>
                <th>File Size</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            {
                filteredJars.map((jar) => (
                    <tr>
                        <td>{humanizeVersion(jar.version)}</td>
                        <td>{friendlyLoader}</td>
                        <td>{gameVersion}</td>
                        <td>{humanizeTimestamp(jar.lastModified)}</td>
                        <td>{humanizeFileSize(jar.fileSize)}</td>
                        <td>
                            <a
                                href={'/download?v=' + encodeURIComponent(Buffer.from(jar.downloadUrl).toString('base64'))}
                                class="btn btn-square btn-sm btn-success"
                            >
                                <Icon name="mdi:download" class="w-6" />
                            </a>
                        </td>
                    </tr>
                ))
            }
        </tbody>
    </table>

    <div class="divider"></div>

    <div class="mb-4 flex justify-center">
        <a href="/sponsor"><img src="https://mods.twelveiterations.com/img/sponsor.png" alt="Support the Development for only $2 a month." /></a>
    </div>
</Layout>
