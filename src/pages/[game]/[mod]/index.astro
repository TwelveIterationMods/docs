---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import Layout from '../../../layouts/Layout.astro';
import MarkdownDocument from '../../../components/MarkdownDocument.astro';
import ModSidebar from '../../../components/ModSidebar.astro';
import getGameImage from '../../../utils/image';
import ForgeBadge from '../../../components/mc/ForgeBadge.astro';
import FabricBadge from '../../../components/mc/FabricBadge.astro';
import NeoForgeBadge from '../../../components/mc/NeoForgeBadge.astro';
import ImageCarousel from '../../../components/GalleryCarousel.astro';
import curseForgeLogo from './_curseforge.svg';
import nodecraftPanel from './nodecraft.jpg';
import discordLogo from './_discord.svg';
import githubLogo from './_github.svg';
import steamLogo from './_steam.svg';
import { Icon } from 'astro-icon';
import BecomePatronButton from '../../../components/BecomePatronButton.astro';

export async function getStaticPaths() {
    const modEntries = await getCollection('mods');
    return modEntries.map((entry) => {
        const parts = entry.slug.split('/');
        return {
            params: { game: parts[0], mod: parts[1] },
            props: { entry },
        };
    });
}

const { entry } = Astro.props;
const game = entry.slug.split('/')[0];
const mod = entry.slug.split('/')[1];
const { Content } = await entry.render();

const allItems = await getCollection('docs', (it) => {
    return it.slug.startsWith(entry.slug + '/') && it.data.type === 'item';
});
const sortedItems = allItems.sort((a, b) => {
    return b.data.priority - a.data.priority;
});

const allGuides = await getCollection('docs', (it) => {
    return it.slug.startsWith(entry.slug + '/') && it.data.type === 'guide';
});
const sortedGuides = allGuides.sort((a, b) => {
    return b.data.priority - a.data.priority;
});

const totalDocs = sortedItems.length + sortedGuides.length;

const githubUrl = entry.data.github ? `https://github.com/${entry.data.github}` : null;
const curseForgeId = entry.data.curseForgeId;
const curseForgeUrl = entry.data.curseForgeSlug ? `https://www.curseforge.com/minecraft/mc-mods/${entry.data.curseForgeSlug}` : null;

const steamUrl = entry.data.steamId ? `https://steamcommunity.com/sharedfiles/filedetails/?id=${entry.data.steamId}` : null;

const latestGameVersion = entry.data.gameVersions[0];
const downloadUrl = `/${game}/${mod}/download/${latestGameVersion}/neoforge/release`;
---

<Layout title={entry.data.title}>
    <div class="flex items-center justify-between">
        <div class="grid">
            <h1 class="text-5xl">{entry.data.title}</h1>
            {
                'loaders' in entry.data && (
                    <div class="flex gap-1 mt-4">
                        {entry.data.loaders.includes('Forge') && <ForgeBadge />}
                        {entry.data.loaders.includes('Fabric') && <FabricBadge />}
                        {entry.data.loaders.includes('NeoForge') && <NeoForgeBadge />}
                    </div>
                )
            }
        </div>

        {
            game === 'mc' && (
                <a href={downloadUrl} class="btn btn-square btn-download">
                    <Icon name="mdi:download" class="w-6" />
                </a>
            )
        }
    </div>

    <div class="divider"></div>

    <MarkdownDocument data={entry.data}>
        <Content />
    </MarkdownDocument>

    {
        curseForgeUrl && curseForgeId && (
            <div class="flex items-center gap-1 mt-2">
                <a href={curseForgeUrl}>
                    <img src={`https://cf.way2muchnoise.eu/full_${curseForgeId}_downloads.svg?badge_style=flat`} alt="Downloads" />
                </a>
                <a href={curseForgeUrl}>
                    <img src={`https://cf.way2muchnoise.eu/versions/${curseForgeId}_latest.svg?badge_style=flat`} alt="Versions" />
                </a>
            </div>
        )
    }

    <div class="divider"></div>

    <div class="flex max-lg:flex-wrap items-start gap-2">
        <ul class="menu menu-sm grid bg-base-200 w-full lg:w-1/2" class:list={{ 'lg:grid-cols-2': totalDocs > 5 }}>
            {
                sortedItems.map((item) => (
                    <li>
                        <a href={`/${item.slug}`}>
                            {item.data.item && <img src={getGameImage(game, item.data.item)} class="w-12 h-12" />}
                            {item.data.icon && (
                                <div class="w-12 h-12 flex justify-center items-center">
                                    <Icon name={item.data.icon} class="w-8" />
                                </div>
                            )}
                            {item.data.title}
                        </a>
                    </li>
                ))
            }
            {
                sortedGuides.map((guide) => (
                    <li>
                        <a href={`/${guide.slug}`}>
                            {guide.data.item && <img src={getGameImage(game, guide.data.item)} class="w-12" />}
                            {guide.data.icon && (
                                <div class="w-12 h-12 flex justify-center items-center">
                                    <Icon name={guide.data.icon} class="w-8" />
                                </div>
                            )}
                            {guide.data.title}
                        </a>
                    </li>
                ))
            }
        </ul>
        <div class="divider divider-horizontal max-lg:hidden"></div>
        <div>
            <div class="flex flex-wrap gap-2">
                {
                    game === 'mc' && (
                        <a class="btn btn-download max-lg:btn-block" href={downloadUrl}>
                            <Icon name="mdi:download" class="w-6" />
                            Downloads
                        </a>
                    )
                }

                {
                    steamUrl && (
                        <a class="btn btn-steam" href={steamUrl}>
                            <Image src={steamLogo} alt="" class="w-6" />
                            Steam Workshop
                        </a>
                    )
                }

                <a class="btn btn-discord max-lg:btn-block" href="https://discord.gg/VAfZ2Nau6j">
                    <Image src={discordLogo} alt="" class="w-6" />
                    Chat & Support
                </a>
                {
                    githubUrl && (
                        <a class="btn btn-github max-lg:btn-block" href={githubUrl}>
                            <Image src={githubLogo} alt="" class="w-6" />
                            Source Code
                        </a>
                    )
                }
            </div>

            {
                entry.data.patreonCallout && (
                    <div class="mt-6">
                        <div class="text-xl font-bold mb-2">Support the Development</div>
                        <BecomePatronButton />
                    </div>
                )
            }

            <div class="mt-6">
                <div class="text-xl font-bold mb-2">Host a Server</div>
                <a href="https://nodecraft.com/r/blay">
                    <Image src={nodecraftPanel} alt="Blay is a Nodecraft Partner! Use code BLAY at nodecraft.com to get the best available discount." width="460" />
                </a>
            </div>
        </div>
    </div>

    <div class="divider"></div>

    <ImageCarousel game={game} namespace={mod + ':gallery'} />

    <ModSidebar entry={entry} slot="sidebar" />
</Layout>
