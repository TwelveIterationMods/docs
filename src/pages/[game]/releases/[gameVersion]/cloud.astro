---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import Layout from '../../../../layouts/Layout.astro';
import listLatestFiles from '../../../../utils/list-latest-files';
import FabricIcon from '../../../../components/mc/FabricIcon.astro';
import NeoForgeIcon from '../../../../components/mc/NeoForgeIcon.astro';
import ForgeIcon from '../../../../components/mc/ForgeIcon.astro';
import humanizeLoader from '../../../../utils/humanize-loader';

export async function getStaticPaths() {
    const exclusiveEntries = await getCollection('releases');
    return exclusiveEntries.map((entry) => {
        const parts = entry.slug.split('/');
        return {
            params: { game: parts[0], gameVersion: entry.data.gameVersion },
            props: { entry },
        };
    });
}

const { entry } = Astro.props;
const gameVersion = entry.data.gameVersion;

const allMods = await getCollection('mods', (it) => {
    return it.slug.startsWith('mc/') && !it.data.discontinued;
});

const jars = await listLatestFiles(gameVersion!, 'snapshot');
const latestByMod = jars.reduce<Record<string, Record<string, (typeof jars)[0]>>>((acc, jar) => {
    if (jar.loader === 'common') return acc;
    if (!acc[jar.name]) {
        acc[jar.name] = {};
    }
    if (!acc[jar.name][jar.loader]) {
        acc[jar.name][jar.loader] = jar;
    }
    return acc;
}, {});

const availableMods = allMods.filter(mod => !!latestByMod[mod.data.modId]);

const sortedMods = availableMods.sort((a, b) => {
    const aHasNewBadge = a.data.badge === 'New';
    const bHasNewBadge = b.data.badge === 'New';
    if (aHasNewBadge !== bHasNewBadge) {
        return bHasNewBadge ? 1 : -1;
    }
    return b.data.priority - a.data.priority;
});
---

<Layout title={entry.data.title}>
    <div class="flex flex-wrap gap-4">
        {
            sortedMods.map((mod) => (
            <div class={`card w-64 bg-base-300 shadow-xl ${mod.data.badge === 'New' ? 'border-2 border-yellow-500 bg-gradient-to-br' : ''}`}>
                    <div class="card-body p-4">
                        <a href={`/mc/${mod.slug.split('/')[1]}`} class="no-underline">
                            <div class="flex items-center gap-4">
                                {mod.data.cover && (
                                    <div class="avatar">
                                        <div class="mask mask-squircle w-8 h-8">
                                            <Image src={mod.data.cover} alt="" width={32} height={32} />
                                        </div>
                                    </div>
                                )}
                                <h2 class="card-title text-base">{mod.data.title}</h2>
                                {mod.data.badge && <span class="badge badge-secondary badge-sm">{mod.data.badge}</span>}
                            </div>
                        </a>
                        <div class="flex gap-1">
                            {Object.entries(latestByMod[mod.data.modId])
                                .sort(([a], [b]) => {
                                    const order = { fabric: 0, neoforge: 1, forge: 2 };
                                    return (order[a as keyof typeof order] || 0) - (order[b as keyof typeof order] || 0);
                                })
                                .map(([loader, jar]) => (
                                    <a
                                        href={`https://modrinth.com/mod/${mod.data.modrinthSlug}/versions?g=${entry.data.gameVersion}&l=${loader}`}
                                        class="btn btn-ghost btn-xs"
                                    >
                                        {loader === 'fabric' && <FabricIcon />}
                                        {loader === 'neoforge' && <NeoForgeIcon />}
                                        {loader === 'forge' && <ForgeIcon />}
                                        {humanizeLoader(loader)}
                                    </a>
                                ))}
                        </div>
                    </div>
                </div>
            ))
        }
    </div>
</Layout>
